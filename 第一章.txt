# 第一章

## この章でわかること
- ポインタとは何か
- ポインタとメモリの関係性について
- ポインタのはたらき

1.1 ポインタを学ぶ前の確認事項
1.2 アドレスとメモリ
1.3 C言語におけるポインタ
1.4 ポインタ変数の例

## 1.1 ポインタを学ぶ前の確認事項
この教材は、C言語のポインタおよびそれに関連の深い事項に焦点を強く当てて学ぶものである。そのため、プログラミングの初歩的な知識やC言語の基本的な文法については予め理解していることを前提に進んでいく。学習者は以下の知識について習得していない場合、初歩的な内容を別媒体で学んでおくことを強く推奨する。
・C言語のコードの基本的な書き方と標準出力方法
・変数の型と宣言
・配列の型と宣言
・Cの演算子の優先順位

## 1.2 アドレスとメモリ

！重要！
- アドレスとは、データを保管するメモリ部分における区画ごとに割り振られ、その区画を示す数字である。
- アドレスは1バイトごとに一つ割り当てられており、データはその型に応じて占領する区画の大きさが異なる。
- メモリに登録した値を利用したい場合、そのデータの型とデータの格納されているアドレスがわかっていれば、データを読み出すことができる。

C言語におけるポインタの概念を理解する前に、アドレスをは何かを理解する必要がある。ここでは、アドレスとは何であるかを正しく理解することを目的とする。
アドレスとは、コンピュータが読み書きに使用するデータを保管している「メモリ」に関する概念だ。コンピュータでデータを扱う際、それらを格納し保存する記憶領域である「メモリ」に、区画ごとの整理のための番地のような番号が振られている。この区画ごとの番号を「アドレス」と呼び、格納されている情報にアクセスするのに使われる。格納されている値に必要なバイト数に応じて、割り当てられるアドレスの範囲が変化する。
具体例として、仮に0010から0090まで、通し番号のように用意されたメモリが存在すると仮定する。

0010
0011
0012
0013
.
.
.
0087
0088
0089
0090

アドレスというのは、ある値がメモリのどの場所に保存されているかを指す値だ。この時、int aとint bという変数がそれぞれ定義され値を持っているとすると、int aの値が格納されているメモリのアドレスとint bの値が格納されているメモリのアドレスがそれぞれ存在するということになる。
この節では仮に、aがアドレス0010-0013の範囲に、bがアドレス0014-0017の範囲に収納されていることにする。下の図のように、値が収納されることになる。

0010 ┐
0011 │ a
0012 │
0013 ┘
0014 ┐
0015 │ b
0016 │
0017 ┘
.
.
.
0089
0090

「アドレスが番地なのであれば単純に一つずつ値を対応させて、aが0010、bが0011に格納されるのではダメなのか？」と考えることもできる。こうならない理由を理解することは、アドレスに関する事象を扱うのに大切である。
アドレスとメモリを理解するのに重要な要素に、データの型におけるサイズがある。このサイズは、その型がどのような大きさのバイト長を持つのかを表すものだ。ここでは、型のサイズがそれぞれ以下の大きさであるとする。
	int 4バイト
	char 1バイト
メモリに保存されるデータはそれぞれ型のサイズに合うバイト数を占拠する。アドレスは1つの値で1バイト分の数値を表すため、1バイトより大きいサイズを持つデータはその分だけ連続したアドレスの領域を使用することになる。従って、仮に数字の若いアドレスに優先して格納していくとする時、int型の値aをアドレス0010に収納すると、int型のバイト長である4バイト分のアドレスを消費し、次に収納するint型の値bはアドレス0010より4バイト分先にある0014か、それよりも遠い所にあるアドレスの場所に、同じく4バイト分のアドレスを消費するように収納されるということになる。

0010 ┐
0011 │ a int型 バイト長4
0012 │
0013 ┘
0014 ┐
0015 │ b int型 バイト長4
0016 │
0017 ┘
.
.
.
0089
0090

基本的にプログラムでは、このメモリ部分に変数の情報などを格納し、メモリから必要な情報を読み出して使用する。その際、以下の2つの要素がわかっていれば、メモリからデータを呼び出すことができる。
	- 取り出したいデータの型
	- 取り出したいデータの格納されている先頭アドレス
取り出したいデータの型が判明していれば、そのデータが何バイトぶんのメモリを使用しているかがわかる。取り出したいデータの格納されている領域の先頭アドレスが判明していれば、そのデータがメモリのどの部分に格納されているかがわかる。この二つの情報を使って、プログラムでは格納されたデータを引き出すことができるということである。
例として、変数bのデータを調べるためにメモリから読み出すことを考える。変数bの先頭アドレスが0014という情報を持っているとすると、変数bにあたるデータは0014を起点に格納されていることがわかる。
0010 
0011 
0012 
0013 
0014 ←変数bはここを起点に格納される
0015 
0016 
0017 
.
.
.
0089
0090

この情報に、変数bがint型であるという情報を組み合わせることで、変数bが4バイト長であることがわかり、変数bとして扱うことができる変数の範囲が示されることになる。
0010 
0011 
0012 
0013 
0014 ←変数bはここを起点に4バイト分格納される
0015 ←変数bに割り当てられている
0016 ←変数bに割り当てられている
0017 ←変数bに割り当てられている
.
.
.
0089
0090

C言語ではこのようにして、さまざまなオブジェクト（変数やメモリのうち、値を表現するそれぞれの部分を指す用語）をアドレスを使って読み出す。この時、アドレスを使ってオブジェクトを読み出し、値を取得することを「アクセスする」と言う。例えば、アドレス0014に「アクセス」することで変数bと言う変数が持つ値を得ることができる。

## 1.3 C言語におけるポインタ

！重要！
- ポインタとは、
- ポインタ型とは、他の型から派生するように作られる型であり、ポインタ型を持つデータはアドレスを指している。
- ポインタ型の変数を宣言する際は、”int *a_pointer”, “char *s_pointer”などのように、”(アドレスの先に格納されるデータの型) *(変数名)”の形で宣言する。

### 1.3-1　ポインタとは何か
先の節で解説したアドレスとメモリの概念は、「ポインタ」の概念を理解するのに必要な知識である。この章では、「ポインタ」の解説や宣言について説明する。

ポインタとは、何らかのオブジェクトの格納されているアドレスを指し示すものである。アドレスを指し示すものが値であれば「ポインタ値」、変数であれば「ポインタ変数」と表す。また、すでに存在する型Xに対し、あるX型のデータのアドレスを指し示すような型を、X型へのアクセスを持つ型という意味で「Xへのポインタ型」と呼ぶ。「ポインタ値」「ポインタ変数」「ポインタ型」は状況に合わせてただ「ポインタ」と呼ぶことがあるが、誤解を招くのでここではきちんと呼び分けることにする。

例として、1.2節で登場した変数a, bを挙げて考える。
int型の変数であるaを指し示すアドレス0010を格納する変数a_pointerを用意するとき、それは「intへのポインタ型」をとる。同様に、int型の変数であるbを指し示すアドレス0014を格納する変数b_pointerも「intへのポインタ型」をとる。

ポインタ型がポインタ先のデータの型を情報に持つのは、その情報がないとそのポインタ型のデータが指し示すものをメモリから正確に取得できないからである。
1.2で述べたように、メモリからデータを取り出すには、以下の二つの情報が必要である。
	- 取り出したいデータの型
	- 取り出したいデータの格納されているアドレス
ポインタ変数は、ポインタを辿った先にあるデータの型名を情報として保有する。この情報と変数内の値（アドレス）を使用することで、メモリから必要なデータを取り出すことができるようになっているということである。

### 1.3-2　ポインタの宣言
基本的な型を指すポインタ変数は、ポインタが指す型と宣言する変数名によって
	(ポインタが指す型) *(変数名)
と宣言する。具体的な宣言例は以下の通りである。
	int *a; //int型の値へのポインタa
	char *b; //char型の値へのポインタb
アドレスを持つ値の型は、それが指す値の型によって変化する。上記の例で宣言したポインタ変数は、それぞれ「intへのポインタ型」「charへのポインタ型」である。
変数の宣言は型名と変数名の組み合わせで行われるが、ポインタであることを表す*は型名の一部であることに注意が必要である。このため、コードで宣言した上記のポインタ変数を
使用する際は、変数名に*を添えない。
ポインタ変数は他の変数と同様に扱われる。例えば、ポインタ変数aに何かのポインタの値を代入したい時は、a = ...と記述する。次節以降で説明するが、*a = ...としてしまうと*が別の意味を持ち意図している挙動とは異なるコードとなるので混同しないよう注意すること。
間違っている例として、以下のような状況を挙げておく。
先ほど宣言したポインタ変数aの他に、同じくint型の値を指すアドレスxがあるとする。このとき、aにxを代入することができるのだが、ポインタ変数aが"*a"と表記されるべきと勘違いをしたり、aがポインタ変数であることを意識しすぎるあまり余分な*を追加したりなどを行い、
	*a = x;
などと書いてしまうと、"*"がポインタ変数の宣言のための記述ではなく、ポインタに関する特殊な演算子となるため、意図した挙動と全く異なる挙動が発生する。
この"*"がどのような意味を持つようになるかは第二章で詳しく解説するため、ここでは簡単に説明をするが、この場合の*演算子は「ポインタ型の値の指し示す先の値」という意味を持つ。つまり、*a = xと書いてしまうと、「ポインタ変数aにxを代入」ではなく、「ポインタ変数aの値が指す先にxを格納」と言う意味になってしまうのだ。


また、指し示す先がオブジェクトであればポインタ型は新しく作成できる。したがって、アクセスする値がintやcharなど基本的な型でなくとも、配列型や関数型のオブジェクトから新しくポインタ型を作ることができる。

配列に関する型の具体例は以下の通りである。
	int (*p_to_array)[10]; //int型の要素を持つ要素数10の配列へのポインタp_array
	int *array_of_p[10]; //intへのポインタを要素に持つ要素数10の配列
上二つの変数宣言は一見同じに見えるが、実際は異なるものである。二つの変数宣言の違いは次のように表すことができる。
int (*p_to_array)[10]の変数名はpであり、()で囲われたものは優先的に処理されるので、p_to_arrayはポインタ型であるということがわかる。*p_arrayをPと書き換えると、
int P[10]となり、Pはint型の要素を持つ要素数10の配列であることがわかる。したがって、p_to_arrayはポインタであり、int型の要素を持つ要素数10の配列を指していることがわかる。
一方で、int *array_of_p[10]という宣言の場合、p_array_twoの左にある*はp_array_twoではなくintとセットになっているものである。これは、*がポインタ型を示すものであり、
int *aと宣言されたaの型はint*型（intへのポインタ型）であることを考えると理解しやすい。したがって、p_array_twoは後ろにある配列型を示す[10]とセットである。
よって、int *array_of_p[10]はint*型によって構成されている要素数10の配列型であるということがわかる。

ポインタ型もまた型の一つであるため、ポインタ型のポインタを作成することも可能である。
	int **p_pointer; //「int型へのポインタ」を指すポインタ変数p_pointer

さらに、関数を指すポインタも指定することができる。関数へのポインタを利用することで、ポインタを通して間接的に関数を呼び出すことができるようになる。
	int (*p_func)(int, *char); //int型の戻り値を持ち、引数にint型とcharへのポインタ型を持つ関数へのポインタp_func

### 1.3-3　ポインタ変数の読み方/書き方がわからない時は？
前の節で述べたポインタ変数およびポインタに関連するの宣言は、如何様にも複雑化する可能性がある。ポインタを正しく利用し理解するために、ポインタ変数の読み方と書き方について勉強しておくのが良い。

ポインタは派生型であるというのは他の節の中で語ったことである。ポインタ型はアドレスが指す値の型の派生型として作られるものであり、型名に派生元の型を含む。また、ポインタ型自身も型であり、ポインタ型から別の型へ派生させることも可能である。従って、ポインタに関する型は複雑化させることもでき、複雑化すればするほど読解が難解になる。

基本的に、ポインタを正確に読むには以下の手順が必要である。
1. 識別子に注目する。識別子とは変数名や関数名など、特定のデータに識別のため付けられる固有名詞のようなものである。すべての表現がこの識別子を修飾するように説明しており、原点となる識別子を定めないことには何も始まらないからである。
2. 識別子に近い位置の要素から、順々に解釈を始める。何が優先されるのかは、Cの演算子の優先順位に準じる。この時、宣言の意味を区切るための( )がある場合は、その内容を先に解釈する。その後、配列の[ ]や関数の引数を囲う( )、ポインタを意味する*など、型宣言に伴う付属の記号を解釈する。なお、括弧の方が*よりも解釈は先に行われる。
3. 最後に、一番左にあるintやcharなどの型を解釈する。

1.3-2で取り上げた’int (*p_to_array)[10]’と’int *array_of_p[10]’の違いを表現した説明を、上記の手順に整理して行う。
	int (*p_to_array)[10]; //int型の要素を持つ要素数10の配列へのポインタ変数p_to_arrayについて
	1. 識別子はp_to_arrayである。
	2. 識別子が括弧で囲まれているため、識別子に一番近い要素はポインタ型を表す”*”である。従って、p_to_arrayはポインタである。
	3. 次に識別子に近い要素は配列の要素数を表す括弧である。従って、p_to_arrayは配列を指すポインタであり、要素数は10である。
	4. 最後に型の宣言を読み、p_to_arrayはint型を要素に持つ配列を表すポインタであり、要素数は10であることがわかる。
	int *array_of_p[10]; //intへのポインタを要素に持つ要素数10の配列array_of_pについて
	1. 識別子はarray_of_pである。
	2. 識別子に一番近い要素はポインタ型を表す"*"ではなく配列を表す[ ]である。従って、array_of_pは配列であり、その要素数は10である。
	3. 次に識別子に近い要素はポインタ型を表す"*"である。従って、array_of_pはなんらかの型を要素に持つ配列であり、その要素数は10である。
	4. 最後に型の宣言を読み、array_of_pはintへのポインタ型を要素に持つ配列であり、その要素数は10であることがわかる。
この説明で行ったことこそが、上記の考え方でポインタを含む宣言を読んだものである。
このように、長い宣言や複雑な宣言であっても、識別子に注目したのちにそこから近い要素を読み解いていくことで、正しく読み書きすることができるようになる。

### 1.3-4　ポインタ型変数への代入に際しての注意
ポインタ型の変数において、想定されている型を持つもの以外のデータを指すアドレスは代入することができない。intのポインタ型変数a_pointerにchar型の変数cのアドレスを代入することはできず、char型へのポインタ型変数c_pointerにint型の変数aのアドレスを代入することもできない。これは、指す先のデータの型とポインタの想定する型が一致しないことによって正しくデータが呼び出せなくなってしまうことを防ぐためである。
仮に、想定されている型と違うデータのポインタでもポインタ型変数に代入できてしまうとする。例として、int型の変数aとcharへのポインタ変数c_pointerが存在するとして、c_pointerへaのアドレス0000を代入したとする。cを使ってメモリにアクセスする段階になって、c_pointerの持つ情報からメモリの中のデータを読み出す時、c_pointerが指すのは「char型で」「アドレス0000に存在するデータ」である。本来aのデータはアドレス0000から0003の4バイトに収まっているはずだが、char型の想定となりアドレス0000に格納された1バイト分しか読み込まれない。結果、予期せぬ挙動に発展することになる。

double型を想定している変数にint型の値を代入するなど、変数と型がちがう値を代入する必要がある際は、キャスト演算子を使用する。キャスト演算子は以下のように扱う。
	(変換先の型) 型変換する式;

例えば、int型の変数aをchar型に変換したい場合、変換先の変数をbとして、
	b = (char) a;
となる。これはポインタ変数でも同じことができる。int型へのポインタ型の変数xをchar型へのポインタ型に変換したい場合は、変換先の変数をyとして、
	y = (char*) x;
と表現できる。
ポインタ型の変数はアドレスを収めており、アドレス同士なのだから変換は必要ないと思うかもしれない。しかし、メモリに正しくアクセスするには、指し示す先のオブジェクトの型が何であるかを指定しなければ、バイト長がわからずに正しくアクセスできない。

## 1.4 ポインタ変数の例
この章の中でさまざまなポインタ変数を挙げてきたが、それぞれどのような場面で使用されるのかについては書いてこなかった。この章では、具体的にどのような場面でポインタ変数が使用されているかを説明する。
なお、第二章において説明する事項にも軽く触れることになる。掘り下げた説明は第二章を参照して欲しい。

### 1.4-1 ポインタ型の値でデータを受け渡す
ポインタ型の値でメモリのデータを指定することで、本来であれば関数の戻り値として他関数に受け渡しできないデータを受渡できるようになる。
有名な例として、swap関数の実装と言うものがある。swap関数とは、与えられた二つの値を入れ替える関数である。
これを実装するときに、以下のように記述するのは間違いである。

void swap(int a, int b){
	int change; //橋渡し役の変数を用意

	change = a; //橋渡し役の変数にaの値を代入
	a = b; //aにbの値を代入
	b = change; //bに橋渡し役の変数の値(aの値)を代入
	
	return;
}

一見きちんとaとbの値を交換できているように見えるが、実際にプログラムを構築してmain関数や他の関数を別途用意し、この関数を使用してもaとbの値は交換されない。
これにはC言語の特徴が関わってくる。C言語は関数の引数において"値渡し"を採用している。これは、関数の引数として値を利用する際、その値をコピーし、元の値ではなくコピーされた値を使って関数内のコードを実行すると言うことである。コピーされた値は関数の外に持ち出されることなく、関数が終わると使用できなくなる。
上記のコードでaとbが交換されない動作はこの値渡しによるものである。関数内ではaとbを直接操作しているように見えるが、実際はコピーされた値を使用しているのであり、元の値は何も変化していない。よって、swap関数が終わってしまうとせっかく入れ替えたコピーのaとbが使用できなくなってしまい、なんの意味もなさない関数となってしまっているのだ。
これを解決するために、ポインタ変数を使用できる。aを指すポインタint* ap、bを指すポインタint* bpを用意し、以下のようにコードを変更する。
void swap(int* ap, int* bp) {
	int change; //橋渡し役の変数を用意

	change = *a; //橋渡し役の変数に、apのアドレスが示す値(= a)を代入
	*a = *b; //aのアドレスが示す値(= a)に、bのアドレスが示す値(= b)を代入
	*b = temp; //bのアドレスが示す値(= b)に、橋渡し役の変数の値(aの値)を代入

	return;
}
こうすることによって、値渡しされているのはポインタでありaやbの値そのものではなく、apやbpを使用して交換したaとbの値はアドレスの指定によって行われているため、操作が消えることはなくなる。

### 1.4-2 多次元配列をポインタで扱う
C言語において、二次元配列をはじめとする多次元配列は、配列の入れ子構造で表現する。
例えば、ある二次元配列arr1が存在したとする。このとき、arr1は「配列を要素に持つ配列」という扱いになる。また、メモリには次のような順番で格納されることになる。

配列arr1
	配列1
		要素1-1
		要素1-2
		要素1-3
		...
		要素1-m
	配列2
		要素2-1
		要素2-2
		要素2-3
		...
		要素2-m
	...





	
	配列n
		要素n-1
		要素n-2
		要素n-3
		...
		要素n-m

例えば、要素1-2を読み出す際、arr1の先頭要素1-1のポインタ値から、要素のバイト長だけ移動することで1-2にたどり着くことができる。
では、配列6の要素を読み出す際、arr1の戦闘要素1-1のポインタ値から、どれだけのバイト長ぶん移動すれば良いのか。これを扱う際に、「配列のポインタ値」が使用できる。「配列のポインタ値」とは配列の先頭要素のポインタ値とは異なり、配列そのものを丸ごと指すポインタである。通常の配列を扱う際には配列の先頭要素のポインタ値を意識するだけで事足りるが、配列arr1は配列を要素に持つ配列である。従って、要素1-1から順に数えていくのではなく、配列1そのものを指すポインタ値を使用して、配列そのもののバイト長ぶんの移動を繰り返すことで行ごとの移動や操作ができるようになる。


第一章　終
