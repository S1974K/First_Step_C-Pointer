演習問題と解答



確認テスト
第一章
問題1 難易度:入門
  以下の変数の宣言は、どのように読むことができるか答えなさい。
  例: int *a; int型へのポインタa

  (1) char *b;
  (2) int (*c)[3];
  (3) double (*func_d)(int d);
  (4) void *malloc(size_t); 
  (5) void free(void*);

  解答1
  (1) char型へのポインタ変数b
  以降、変数bをコード内で使用する際は"*b"ではなく"b"の記述で表すことに注意。*は型名の一部で、ポインタ型であることを表している。
  (2) int型の値を要素に持つ要素数3の配列へのポインタ変数c
  (*c)により、cはポインタであることがわかる。*cを仮にCと置いて書き直すと書き直すと"int C[3]"となり、int型の値を要素に持つ要素数3の配列Cということがわかる。
  Cは「ポインタc」であることから、置き換えて読むことで正しく把握できる。
  (3) double型の値を返す、int型の値dを引数に持つ関数へのポインタ変数func_d
  (*func_d)により、func_dはポインタであることがわかる。(*func_d)をDと置いて書き直すと"double D(int d);"となり、これはdouble型の値を返すDという関数を
  指していることがわかる。また、その引数はint型の値dであるということも判明する。
  (4) void型のポインタを返し、引数にsize_t型の値を持つ関数malloc
  "(*malloc)"という記述の場合はmallocは関数へのポインタということになるが、"void *malloc"の場合、*はmallocではなくvoidという型に属するものである。void*型は
  ポインタ型でさえあればどんな型の値も受け取ることができる特殊な型である。
  また、この関数は実際に標準ライブラリに搭載されているmallocという関数で、これから使用する予定のメモリをあらかじめ予約する形で確保し、確保した領域を指すポインタを返す。
  (5) 任意の型を指すポインタ(voidポインタ)を引数に持つ、void型を返す関数free
  freeはmallocの対として使用できる関数である。この関数はあらかじめ予約する形で確保した領域を解放し、次の機会にまた使用できるようにする関数である。

問題2 難易度:入門
  以下のような意味を持つ宣言は、どのようにして書けばいいか答えなさい。
  例: int型へのポインタa

  (1) double型へのポインタe
  (2) char型の値を要素に持つ要素数5の配列へのポインタf
  (3) char型ポインタを要素に持つ要素数3の配列g
  (4) int型を返す、int型の値xを引数に持つ関数へのポインタh
  (5) int型を返す、char型ポインタの値yを引数に持つ関数i

  解答2
  (1) double *e
  (2) char (*f)[5]
  (3) char *g[3]
  (4) int (*h)(int x)
  (5) int i(char *y)

  (2)と(3)は、括弧をつけるのはどこかに注目して解くのが良い。(2)ではfがポインタであるため、fに一番近く書かれる要素はポインタ型を表す記号のはずである。
  (3)ではgは配列であるため、gに一番近く掛かれる要素は配列を表す括弧とその要素数である。

第二章
1

2

3

4

5

6

7

8

9

10